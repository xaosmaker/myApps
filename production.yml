---
services:
  myapps_api: &myapps_api
    build:
      context: .
      dockerfile: ./docker/production/django/Dockerfile
    image: myapps_api
    container_name: myapps_api
    restart: always
    volumes:
      - static_volume:/app/static
    # ports:
    #   - "8001:8000"
    expose:
      - "8000"
    env_file:
      - ./.envs/.env.production
    depends_on:
      - myapps_postgres_db
    command: /start
    networks:
      - myApps_nw

  myapps_postgres_db:
    build:
      context: .
      dockerfile: ./docker/production/postgres/Dockerfile
    image: myapps_postgres_db
    container_name: myapps_postgres_db
    ports:
      - "5432:5432"
    volumes:
      - myapps_postgres_db_data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.env.production
    restart: always
    networks:
      - myApps_nw

  myapps_redis:
    image: redis:7.2.5-alpine3.20
    command: redis-server --appendonly yes
    container_name: myapps_redis
    volumes:
      - myapps_redis_data:/data
    networks:
      - myApps_nw

  myapps_celery_worker:
    <<: *myapps_api
    image: myapps_celery_worker
    container_name: myapps_celery_worker
    command: /start-celeryworker

  myapps_celery_beat:
    <<: *myapps_api
    image: myapps_celery_beat
    container_name: myapps_celery_beat
    command: /start-celerybeat

  myapps_flower:
    <<: *myapps_api
    image: myapps_flower
    container_name: myapps_flower
    ports:
      - "5555:5555"
    command: /start-flower
  myapps_nginx:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    image: myapps_nginx
    container_name: myapps_nginx
    restart: always
    ports:
      - "8080:80"
    volumes:
      - static_volume:/app/static
      - myapps_logs_store:/var/log/nginx
    depends_on:
      - myapps_api
    networks:
      - myApps_nw

networks:
  myApps_nw:

volumes:
  myapps_postgres_db_data: {}
  myapps_logs_store: {}
  static_volume: {}
  myapps_redis_data: {}
